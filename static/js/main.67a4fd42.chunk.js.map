{"version":3,"sources":["components/navbar/NabarRx.js","components/footer/Footer.js","components/algoriphms/common/functions.js","components/algoriphms/hellman/DiffieHellman.js","components/algoriphms/shamir/Shamir.js","components/home/home.js","App.js","index.js"],"names":["NavbarRx","Navbar","className","responisve","variant","expand","to","Brand","Toggle","aria-controls","Collapse","id","Nav","Footer","BigInt","require","DiffiHellman","p","g","Xa","randomIntFromInterval","console","log","Ya","fastDegreeModule","Xb","Yb","Zab","Zba","min","max","Math","floor","random","a","x","result","arrayOfDegrees","countFactorOf2Degree","num","tmp","toString","split","helpVar","helpDegree","i","length","degreeModule","parseInt","m","NOD","b","DiffieHellman","state","handleSubmit","event","preventDefault","runDiffHellman","results","setState","Form","onSubmit","this","Row","Group","as","Col","md","Label","Control","required","type","value","onChange","e","target","readOnly","Button","React","Component","Shamir","props","runShamir","pNumber","P","message","CA","DA","CB","DB","Ca","randBetween","Da","modInv","Cb","Db","x1","str","output","charCodeAt","trim","asUTF8Codes","x2","x3","text","x4","String","fromCharCode","join","ShamirEncode","Home","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67a4fd42.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./NavBar.css\"\r\n\r\nconst NavbarRx = () => {\r\n    return (\r\n        <Navbar className=\"navbar\" responisve=\"true\" variant=\"dark\" expand=\"lg\">\r\n            <NavLink to=\"/\"><Navbar.Brand><span className=\"navbar-title\">Криптография</span></Navbar.Brand></NavLink>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav>\r\n                    <NavLink to=\"/diffiHellman\" className=\"nav-link \">\r\n                        Диффи-Хеллман\r\n                    </NavLink>\r\n                    <NavLink to=\"/shamir\" className=\"nav-link \">\r\n                        Алгоритм Шамира\r\n                    </NavLink>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavbarRx;\r\n","import React from \"react\";\r\n\r\nimport \"./Footer.css\";\r\nconst Footer = () => {\r\n    return (\r\n    <nav className=\"footer\" >\r\n        <h6>Кожевникова Яна, группа 17203. 7 семестр, 2020</h6>\r\n    </nav>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","const BigInt = require('big-integer');\r\n/*An Diffie-Hellman algorithm\r\n* Can get (P and Q) OR size of them in number of digits*/\r\nexport function DiffiHellman(p, g){\r\n    // first\r\n    let Xa =  randomIntFromInterval((p/2), (p-1));\r\n    console.log(Xa);\r\n    let Ya = fastDegreeModule(g,Xa, p);\r\n    console.log(Ya);\r\n    // second\r\n    let Xb = randomIntFromInterval((p/2), (p-1));\r\n    console.log(Xb);\r\n    let Yb = fastDegreeModule(g,Xb, p);\r\n    console.log(Yb);\r\n    // Connection\r\n    let Zab = fastDegreeModule(Yb,Xa, p);\r\n    console.log(Zab);\r\n    let Zba = fastDegreeModule(Ya,Xb, p);\r\n    console.log(Zba);\r\n\r\n//     console.table({ p, g, Xa, Ya, Xb, Yb, Zab, Zba})\r\n    return {p, g, Xa, Ya, Xb, Yb, Zab, Zba}\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) { // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n/*A - base, X - power, P - module\r\n* returns (A ** P) mod M for any numbers*/\r\nexport function fastDegreeModule(a,x,p) {\r\n    let result = 1;\r\n    let arrayOfDegrees = countFactorOf2Degree(x).split(\" \");\r\n    let helpVar = (a * a) % p;\r\n    let helpDegree = 2;\r\n    for (let i = arrayOfDegrees.length; i > 0; i--) {\r\n\r\n        // Возведение в степень по модулю\r\n        if (arrayOfDegrees[i - 1] !== \"\" && arrayOfDegrees[i - 1] !== '1' && arrayOfDegrees[i - 1] !== '0') {\r\n            while (helpDegree.toString() !== arrayOfDegrees[i - 1]) {\r\n                helpVar = ((helpVar * helpVar)) % p;\r\n                helpDegree = helpDegree * 2;\r\n            }\r\n            result = (result * helpVar) % p;\r\n        } else {\r\n            result = (result * degreeModule(a, parseInt(arrayOfDegrees[i - 1]), p)) % p;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/*Same result but it's not optimal\r\n* Also it can't evaluate a REAL big numbers*/\r\nconst degreeModule = (a, p, m) => {\r\n    return (a ** p) % m;\r\n};\r\n\r\n/*Factorize number to sum of degrees of 2\r\n* returns a string like \"2 4 8\" for 14 */\r\nfunction countFactorOf2Degree(num) {\r\n    //if(num == 0) return \"0\";\r\n    let tmp = 1;\r\n    if (num === 0) {\r\n        return 0;\r\n    } else if (num === 1) {\r\n        return \"1\";\r\n    }\r\n    while (tmp <= num) {\r\n        tmp *= 2;\r\n    }\r\n    tmp /= 2;\r\n    num = num - tmp;\r\n    return tmp.toString() + \" \" + countFactorOf2Degree(num);\r\n}\r\n\r\n/*Full Shamir encryption and decryption algorithm\r\n* returns an all steps of encoding and decoding,*/\r\nexport function ShamirEncode(message, P, CA, DA, CB, DB) { // size - порядок // p = (q*2) + 1\r\n    let p = BigInt(P); // Открытое большое число\r\n    let Ca = BigInt(CA); // абонент A\r\n    while (NOD(Ca, p-1n) !== 1n){\r\n        Ca = BigInt(BigInt.randBetween(1,p-1n).toString());\r\n    }\r\n    let Da = BigInt(DA || BigInt((BigInt(Ca).modInv(p-1n)).toString()));\r\n\r\n    let Cb = BigInt(CB); // абонент B\r\n    while (NOD(Cb, p-1n) !== 1n){\r\n        Cb = BigInt(BigInt.randBetween(1,p-1n).toString());\r\n    }\r\n    let Db = BigInt(DB || BigInt((BigInt(Cb).modInv(p-1n)).toString()));\r\n    // A формирует x1\r\n    let x1 = asUTF8Codes(message).split(\" \");\r\n    for (let i = 0; i < x1.length; i++){\r\n        x1[i] = fastDegreeModule(x1[i], Ca, p);\r\n    }\r\n    // x1 отправляется к абоненту B\r\n    let x2 = [];\r\n    for (let i = 0; i < x1.length; i++){\r\n        x2[i] = fastDegreeModule(x1[i], Cb, p);\r\n    }\r\n    // x2 отправляется к абоненту A\r\n    let x3 = [];\r\n    for (let i = 0; i < x2.length; i++){\r\n        x3[i] = fastDegreeModule(x2[i], Da, p);\r\n    }\r\n    // x3 отправляется к абоненту B и он получает исходное сообщение\r\n    let x4 = [];\r\n    for (let i = 0; i < x3.length; i++){\r\n        x4[i] = fastDegreeModule(x3[i], Db, p);\r\n        x4[i] = unicodeToChar(parseInt(x4[i]));\r\n    }\r\n    x4 = x4.join('');\r\n    return {p, Ca, Cb, Da, Db, x1, x2, x3, x4}\r\n}\r\n\r\n/*Generate P, Ca, Cb, Da, Db for Shamir's alrorithm\r\n* size of P is 'size' bits*/\r\nfunction ShamirGenerate(size) { // size - порядок // p = (q*2) + 1\r\n\r\n    let numbers  = getPrimeNumbersBits(size);\r\n    let p = BigInt(numbers.p); // Открытое большое число\r\n    let Ca = 2n; // абонент A\r\n    while (NOD(Ca, p-1n) !== 1n){\r\n        Ca = BigInt(BigInt.randBetween(1,p-1n).toString());\r\n    }\r\n    let Da = BigInt((BigInt(Ca).modInv(p-1n)).toString());\r\n\r\n    let Cb = 2n; // абонент B\r\n    while (NOD(Cb, p-1n) !== 1n){\r\n        Cb = BigInt(BigInt.randBetween(1,p-1n).toString());\r\n    }\r\n    let Db = BigInt((BigInt(Cb).modInv(p-1n)).toString());\r\n    return {p, Ca, Cb, Da, Db}\r\n}\r\n\r\n/*Find d = a^(-1) mod m\r\n* uses an Extended Euclid's algorithm */\r\nfunction getInverseElem(a,m) {\r\n    m = BigInt(m); a = BigInt(a);\r\n    a = (a % m + m) % m;\r\n    if (!a || m < 2n) {\r\n        return NaN // invalid input\r\n    }\r\n    const s = [];\r\n    let b = m;\r\n    while(b) {                  // Алгоритм Евклида с записью промежуточных значений\r\n        [a, b] = [b, a % b];\r\n        s.push({a, b})\r\n    }\r\n    if (a !== 1n) {\r\n        return NaN // Обратного элемента нет\r\n    }\r\n    // Нахождение обратного элемента по \"ручному алгоритму\"\r\n    let x = 1n;\r\n    let y = 0n;\r\n    for(let i = s.length - 2; i >= 0; --i) {\r\n        [x, y] = [y,  x - y * ~~(s[i].a / s[i].b)]\r\n    }\r\n    let t = ((y % m) + m) % m;\r\n    if (t > 0n){\r\n        return t\r\n    } else {\r\n        return t + m;\r\n    }\r\n}\r\n\r\n/*GCD - Euclid's algorithm to find Greatest common divisor */\r\nfunction NOD(a, b) {\r\n    if (!b) {\r\n        return a;\r\n    }\r\n    return NOD(b, a % b);\r\n}\r\n\r\n/*String to array of UTF8 codes*/\r\nfunction asUTF8Codes(str) {\r\n    let output = \"\";\r\n    for (let i = 0; i < str.length; i++) {\r\n        output += str.charCodeAt(i) + \" \";\r\n    }\r\n    return output.trim();\r\n}\r\n\r\n/*Number to UTF char*/\r\nfunction unicodeToChar(text) {\r\n    return String.fromCharCode(parseInt(text))\r\n}\r\n\r\n\r\n/*Generate 2 prime numbers P and Q\r\n* Q consist of deg digits\r\n* P = Q*2 + 1*/\r\nfunction getPrimeNumbers(deg) { // указывается степень\r\n    const min = BigInt(10n ** (BigInt(deg)-2n));\r\n    const max = BigInt(10n ** (BigInt(deg)));\r\n    let q,p;\r\n    while (true) {\r\n        q = (BigInt.randBetween(min, max)).toString();\r\n        if (SolovayStrassenTest(q.toString(),32)) {\r\n            p = (2n*BigInt(q) + 1n).toString();\r\n            if (SolovayStrassenTest(p.toString(),32)){ // Почему-то нужно передавать как строку BigInt не работает\r\n                return {p, q}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*Test on primarity of a number P\r\n* returns bool*/\r\nfunction SolovayStrassenTest(p, iterations) {\r\n    p = BigInt(p);\r\n    if (p < 2n)\r\n        return false;\r\n    if (p !== 2n && p % 2n === 0n)\r\n        return false;\r\n\r\n    for (let i = 0; i < iterations; i++)\r\n    {\r\n        // Generate a random number a\r\n        let a = BigInt(BigInt.randBetween(1, 999999999)) % ((p - 1n) + 1n); // TODO: Do ok generation of prime numbers\r\n        let jacobian = (p + BigInt(calculateJacobian(a, p))) % p;\r\n        let mod = fastDegreeModule(a, (p - 1n) / 2n, p);\r\n\r\n        if (!jacobian || mod !== jacobian)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/*Generate 2 prime numbers P and Q\r\n* Q size in bits; P = Q*2 + 1\r\n* This function uses a secure generation of bytes with 'crypto' object*/\r\nfunction getPrimeNumbersBits(bits) { // У p-1 будет большой простой делитель\r\n\r\n    let q,p;\r\n    while (true) {\r\n        q = BigInt('0x' + crypto.randomBytes(~~(bits/8)).toString('hex'));\r\n        if (SolovayStrassenTest(q,10)) {\r\n            // console.timeLog('gen');\r\n            p = ((2n*q + 1n));\r\n            if (SolovayStrassenTest(p,10)){\r\n                return {p, q}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*Find a Jacobian*/\r\nfunction calculateJacobian(a, n) {\r\n    if (!a)\r\n        return 0;// (0/n) = 0\r\n    let  ans = 1;\r\n    if (a < 0n)\r\n    {\r\n        a = -a; // (a/n) = (-a/n)*(-1/n)\r\n        if (n % 4n === 3n)\r\n            ans = -ans; // (-1/n) = -1 if n = 3 (mod 4)\r\n    }\r\n\r\n    if (a === 1n)\r\n        return ans;// (1/n) = 1\r\n\r\n    while (a)\r\n    {\r\n        if (a < 0n)\r\n        {\r\n            a = -a;// (a/n) = (-a/n)*(-1/n)\r\n            if (n % 4n === 3n)\r\n                ans = -ans;// (-1/n) = -1 if n = 3 (mod 4)\r\n        }\r\n        while (a % 2n === 0n)\r\n        {\r\n            a = a / 2n;\r\n            if (n % 8n === 3n || n % 8n === 5n)\r\n                ans = -ans;\r\n\r\n        }\r\n        [a,n] = [n,a]; // swap\r\n        if (a % 4n === 3n && n % 4n === 3n)\r\n            ans = -ans;\r\n        a = a % n;\r\n        if (a > n / 2n)\r\n            a = a - n;\r\n    }\r\n    if (n === 1n)\r\n        return ans;\r\n    return 0;\r\n}\r\n","import React from 'react';\r\n\r\nimport {Form, Col, Button} from 'react-bootstrap';\r\nimport { DiffiHellman } from '../common/functions';\r\n\r\nexport default class DiffieHellman extends React.Component {\r\n    state = {\r\n        p: '',\r\n        g: '',\r\n        Xa: '',\r\n        Ya: '',\r\n        Xb: '',\r\n        Yb: '',\r\n        Zab: '',\r\n        Zba: ''\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { p, g } = this.state;\r\n        this.runDiffHellman(p, g);\r\n    };\r\n\r\n    runDiffHellman = (p, g) => {\r\n        const pNumber = parseInt(p);\r\n        const gNumber = parseInt(g);\r\n        let results = DiffiHellman(pNumber, gNumber);\r\n        this.setState({\r\n            p: results.p.toString(10),\r\n            g: results.g.toString(10),\r\n            Xa: results.Xa.toString(10),\r\n            Xb: results.Xb.toString(10),\r\n            Ya: results.Ya.toString(10),\r\n            Yb: results.Yb.toString(10),\r\n            Zab: results.Zab.toString(10),\r\n            Zba: results.Zba.toString(10),\r\n        });\r\n    };\r\n\r\n    render() {\r\n      return (\r\n          <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>P</Form.Label>\r\n                      <Form.Control\r\n                          required\r\n                          type=\"text\"\r\n                          value={this.state.p}\r\n                          onChange={e => this.setState({p: e.target.value})}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>G</Form.Label>\r\n                      <Form.Control\r\n                          required\r\n                          type=\"text\"\r\n                          value={this.state.g}\r\n                          onChange={e => this.setState({g: e.target.value})}\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Xa</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Xa}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Ya</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Ya}\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Xb</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Xb}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Yb</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Yb}\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Zab</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Zab}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Zba</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Zba}\r\n\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n          </Form>\r\n      );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Button, Col, Form} from \"react-bootstrap\";\r\nimport {ShamirEncode} from \"../common/functions\";\r\n\r\nexport default class Shamir extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            x: '',\r\n            P: '',\r\n            Ca: '',\r\n            Da: '',\r\n            Cb: '',\r\n            Db: '',\r\n            x1: '',\r\n            x2: '',\r\n            x3: '',\r\n            x4: ''\r\n        };\r\n    }\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { x, p } = this.state;\r\n        this.runShamir(x, p);\r\n    };\r\n\r\n    runShamir = (x, p) => {\r\n        const pNumber = parseInt(this.state.P);\r\n        console.log(pNumber);\r\n        let results = ShamirEncode(x, pNumber);\r\n        console.log(results);\r\n        this.setState({\r\n            Ca: results.Ca.toString(10),\r\n            Cb: results.Cb.toString(10),\r\n            Da: results.Da.toString(10),\r\n            Db: results.Db.toString(10),\r\n            x1: results.x1.toString(10),\r\n            x2: results.x2.toString(10),\r\n            x3: results.x3.toString(10),\r\n            x4: results.x4.toString(10)\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Сообщение</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.x}\r\n                            onChange={e => this.setState({x: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>P</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.P}\r\n                            onChange={e => this.setState({P: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Ca</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.Ca}\r\n                            onChange={e => this.setState({Ca: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Da</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.Da}\r\n                            onChange={e => this.setState({Da: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Cb</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.Cb}\r\n                            onChange={e => this.setState({Cb: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Db</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.Db}\r\n                            onChange={e => this.setState({Db: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x1</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Zab}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x2</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Zba}\r\n\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x3</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Zab}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x4</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Zba}\r\n\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./Home.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className={\"home\"}>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport NavBar from \"./components/navbar/NabarRx\";\nimport Footer from \"./components/footer/Footer\";\nimport DiffieHellman from \"./components/algoriphms/hellman/DiffieHellman\";\nimport Shamir from \"./components/algoriphms/shamir/Shamir\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Home from \"./components/home/home\";\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className={\"common\"}>\n                <Router>\n                    <NavBar />\n                    <Switch>\n                        <div className={\"algo mt-5\"}>\n                            <Route exact path=\"/\" component={Home} />\n                            <Route exact path=\"/diffiHellman\" component={DiffieHellman} />\n                            <Route exact path=\"/shamir\" component={Shamir} />\n                        </div>\n                    </Switch>\n                    <Footer />\n                </Router>\n            </div>\n\n        );\n    };\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}