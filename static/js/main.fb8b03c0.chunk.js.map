{"version":3,"sources":["components/navbar/NabarRx.js","components/footer/Footer.js","components/algoriphms/common/functions.js","components/algoriphms/hellman/DiffieHellmanAlgorithm.js","components/algoriphms/hellman/DiffieHellmanForm.js","components/algoriphms/Shamir/ShamirAlgorithm.js","components/algoriphms/Shamir/ShamirForm.js","components/home/home.js","components/algoriphms/ElGamal/ElGamalAlgorithm.js","components/algoriphms/ElGamal/ElGamal.js","components/algoriphms/MentalPoker/MentalPokerAlgorithm.js","components/algoriphms/MentalPoker/MentalPoker.js","App.js","index.js"],"names":["NavbarRx","Navbar","className","responisve","variant","expand","to","Brand","Toggle","aria-controls","Collapse","id","Nav","Footer","BigInt","require","randomIntFromInterval","min","max","Math","floor","random","fastDegreeModule","A","X","P","a","x","p","result","arrayOfDegrees","countFactorOf2Degree","num","tmp","equals","multiply","divide","minus","toString","split","helpVar","helpDegree","i","length","degreeModule","m","NOD","b","DiffiHellman","G","g","Xa","randBetween","Ya","Xb","Yb","Zab","Zba","DiffieHellmanForm","state","handleSubmit","event","preventDefault","runDiffHellman","results","parseInt","setState","Form","onSubmit","this","Row","Group","as","Col","md","Label","Control","required","type","value","onChange","e","target","readOnly","Button","React","Component","ShamirEncode","message","Ca","Da","modInv","Cb","Db","ShamirGenerate","x1","x2","x3","x4","console","table","ShamirForm","props","runShamir","pNumber","log","Home","ElGamalEncrypt","D2","k","d2","r","ElGamalDecrypt","C2","R","c2","ElGamalGenerate","ElGamal","decipher","runElGamal","messageNumber","gNumber","caNumber","daNumber","cbNumber","dbNumber","cipher","MentalPoker","MentalPokerGenerate","cards","push","codeCards","index","aliceCard","splice","w1","MentalPokerForm","alpha","betta","gamma","bobCard","runMentalPoker","App","Fragment","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb8b03c0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./NavBar.css\"\r\n\r\nconst NavbarRx = () => {\r\n    return (\r\n        <Navbar className=\"navbar\" responisve=\"true\" variant=\"dark\" expand=\"lg\">\r\n            <NavLink to=\"/\"><Navbar.Brand><span className=\"navbar-title\">Криптография</span></Navbar.Brand></NavLink>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav>\r\n                    <NavLink to=\"/diffiHellman\" className=\"nav-link \">\r\n                        Диффи-Хеллман\r\n                    </NavLink>\r\n                    <NavLink to=\"/shamir\" className=\"nav-link \">\r\n                        Алгоритм Шамира\r\n                    </NavLink>\r\n                    <NavLink to=\"/ELGamal\" className=\"nav-link \">\r\n                        Алгоритм Эль-Гамаля\r\n                    </NavLink>\r\n                    <NavLink to=\"/MentalPoker\" className=\"nav-link \">\r\n                        Ментальный покер\r\n                    </NavLink>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavbarRx;\r\n","import React from \"react\";\r\n\r\nimport \"./Footer.css\";\r\nconst Footer = () => {\r\n    return (\r\n    <nav className=\"footer\" >\r\n        <h6>Кожевникова Яна, группа 17203. 7 семестр, 2020</h6>\r\n    </nav>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","const BigInt = require('big-integer');\r\n\r\n\r\nexport function randomIntFromInterval(min, max) { // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n/*A - base, X - power, P - module\r\n* returns (A ** X) mod P for any numbers*/\r\nexport function fastDegreeModule(A,X,P) {\r\n    let a = BigInt(A); let x = BigInt(X); let p = BigInt(P);\r\n    let result = BigInt(1);\r\n    let arrayOfDegrees = countFactorOf2Degree(x).split(\" \");\r\n    let helpVar = (a * a) % p;\r\n    let helpDegree = BigInt(2);\r\n    for (let i = arrayOfDegrees.length; i > 0; i--) {\r\n\r\n        // Возведение в степень по модулю\r\n        if (arrayOfDegrees[i - 1] !== \"\" && arrayOfDegrees[i - 1] !== '1' && arrayOfDegrees[i - 1] !== '0') {\r\n\r\n            while (helpDegree.toString() !== arrayOfDegrees[i - 1]) {\r\n                helpVar = ((helpVar * helpVar)) % p;\r\n                helpDegree = helpDegree * BigInt(2);\r\n            }\r\n\r\n            result = (result * helpVar) % p;\r\n\r\n        } else result = (result * degreeModule(a, BigInt(arrayOfDegrees[i - 1]), p)) % p;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/*Same result but it's not optimal\r\n* Also it can't evaluate a REAL big numbers*/\r\nconst degreeModule = (a, p, m) => {\r\n    return (a ** p) % m;\r\n};\r\n\r\n/*Factorize number to sum of degrees of 2\r\n* returns a string like \"2 4 8\" for 14 */\r\nfunction countFactorOf2Degree(num) {\r\n  //  console.log(num);\r\n    //if(num == 0) return \"0\";\r\n    let tmp = BigInt(1);\r\n    if (num.equals(BigInt(0))) {\r\n        return \"0\";\r\n    } else if (num.equals(BigInt(1))) {\r\n        return \"1\";\r\n    }\r\n    while (tmp <= num) {\r\n        tmp = tmp.multiply(BigInt(2));\r\n    }\r\n    tmp = tmp.divide(BigInt(2));\r\n //   console.log(\"tmp = \" + tmp.toString());\r\n    num = num.minus(tmp);\r\n    return tmp.toString() + \" \" + countFactorOf2Degree(num);\r\n}\r\n\r\n\r\n\r\n/*GCD - Euclid's alg;orithm to find Greatest common divisor */\r\nexport function NOD(a, b) {\r\n    if (!b) {\r\n        return a;\r\n    }\r\n    return NOD(b, a % b);\r\n}\r\n\r\n/*String to array of UTF8 codes*/\r\nexport function asUTF8Codes(str) {\r\n    let output = \"\";\r\n    for (let i = 0; i < str.length; i++) {\r\n        output += str.charCodeAt(i) + \" \";\r\n    }\r\n    return output.trim();\r\n}\r\n\r\n/*Number to UTF char*/\r\nexport function unicodeToChar(text) {\r\n    return String.fromCharCode(parseInt(text))\r\n}\r\n\r\n/*Test on primarity of a number P\r\n* returns bool*/\r\nfunction SolovayStrassenTest(p, iterations) {\r\n    p = BigInt(p);\r\n    if (p < 2n)\r\n        return false;\r\n    if (p !== 2n && p % 2n === 0n)\r\n        return false;\r\n\r\n    for (let i = 0; i < iterations; i++)\r\n    {\r\n        // Generate a random number a\r\n        let a = BigInt(BigInt.randBetween(1, 999999999)) % ((p - 1n) + 1n); // TODO: Do ok generation of prime numbers\r\n        let jacobian = (p + BigInt(calculateJacobian(a, p))) % p;\r\n        let mod = fastDegreeModule(a, (p - 1n) / 2n, p);\r\n\r\n        if (!jacobian || mod !== jacobian)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/*Generate 2 prime numbers P and Q\r\n* Q size in bits; P = Q*2 + 1\r\n* This function uses a secure generation of bytes with 'crypto' object*/\r\nexport function getPrimeNumbersBits(bits) { // У p-1 будет большой простой делитель\r\n\r\n    let q,p;\r\n    while (true) {\r\n        q = BigInt('0x' + crypto.randomBytes(~~(bits/8)).toString('hex'));\r\n        if (SolovayStrassenTest(q,10)) {\r\n            // console.timeLog('gen');\r\n            p = ((2n*q + 1n));\r\n            if (SolovayStrassenTest(p,10)){\r\n                return {p, q}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*Find a Jacobian*/\r\nfunction calculateJacobian(a, n) {\r\n    if (!a)\r\n        return 0;// (0/n) = 0\r\n    let  ans = 1;\r\n    if (a < 0n)\r\n    {\r\n        a = -a; // (a/n) = (-a/n)*(-1/n)\r\n        if (n % 4n === 3n)\r\n            ans = -ans; // (-1/n) = -1 if n = 3 (mod 4)\r\n    }\r\n\r\n    if (a === 1n)\r\n        return ans;// (1/n) = 1\r\n\r\n    while (a)\r\n    {\r\n        if (a < 0n)\r\n        {\r\n            a = -a;// (a/n) = (-a/n)*(-1/n)\r\n            if (n % 4n === 3n)\r\n                ans = -ans;// (-1/n) = -1 if n = 3 (mod 4)\r\n        }\r\n        while (a % 2n === 0n)\r\n        {\r\n            a = a / 2n;\r\n            if (n % 8n === 3n || n % 8n === 5n)\r\n                ans = -ans;\r\n\r\n        }\r\n        [a,n] = [n,a]; // swap\r\n        if (a % 4n === 3n && n % 4n === 3n)\r\n            ans = -ans;\r\n        a = a % n;\r\n        if (a > n / 2n)\r\n            a = a - n;\r\n    }\r\n    if (n === 1n)\r\n        return ans;\r\n    return 0;\r\n}\r\n\r\n\r\n/*Generate a prime number\r\n* size in bits*/\r\nexport function randomPrime(bits) {\r\n    const min = BigInt.one.shiftLeft(bits - 1);\r\n    const max = BigInt.one.shiftLeft(bits).prev();\r\n\r\n    while (true) {\r\n        let p = BigInt.randBetween(min, max);\r\n        // console.log(p);\r\n        if (p.isProbablePrime(32)) {\r\n            return p.toString();\r\n        }\r\n    }\r\n}\r\n","/*An Diffie-Hellman algorithm\r\n* Can get (P and Q) OR size of them in number of digits*/\r\nimport {fastDegreeModule, randomIntFromInterval} from \"../common/functions\";\r\nconst BigInt = require('big-integer');\r\n/*An Diffie-Hellman algorithm\r\n* Can get (P and Q) OR size of them in number of digits*/\r\nexport function DiffiHellman(P,G){\r\n    let p,g;\r\n    p = BigInt(P);\r\n    g = BigInt(G);\r\n    // first client\r\n    let Xa = (BigInt.randBetween(p.divide(BigInt(2)), p.minus(BigInt(1)))).toString();\r\n    let Ya = fastDegreeModule(g,Xa, p);\r\n\r\n    // second\r\n    let Xb = (BigInt.randBetween(p.divide(BigInt(2)), p.minus(BigInt(1)))).toString();\r\n    let Yb = fastDegreeModule(g,Xb, p);\r\n\r\n    // Connection\r\n    let Zab = fastDegreeModule(Yb,Xa, p);\r\n    let Zba = fastDegreeModule(Ya,Xb, p);\r\n\r\n    // console.table({q, p, g, Xa, Ya, Xb, Yb, Zab, Zba})\r\n    return {p, g, Xa, Ya, Xb, Yb, Zab, Zba}\r\n}\r\n","import React from 'react';\r\n\r\nimport {Form, Col, Button} from 'react-bootstrap';\r\nimport { DiffiHellman } from './DiffieHellmanAlgorithm';\r\n\r\nexport default class DiffieHellmanForm extends React.Component {\r\n    state = {\r\n        p: '',\r\n        g: '',\r\n        Xa: '',\r\n        Ya: '',\r\n        Xb: '',\r\n        Yb: '',\r\n        Zab: '',\r\n        Zba: ''\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { p, g } = this.state;\r\n        this.runDiffHellman(p, g);\r\n    };\r\n\r\n    runDiffHellman = (p, g) => {\r\n        const pNumber = parseInt(p);\r\n        const gNumber = parseInt(g);\r\n        let results = DiffiHellman(pNumber, gNumber);\r\n        this.setState({\r\n            p: results.p.toString(10),\r\n            g: results.g.toString(10),\r\n            Xa: results.Xa.toString(10),\r\n            Xb: results.Xb.toString(10),\r\n            Ya: results.Ya.toString(10),\r\n            Yb: results.Yb.toString(10),\r\n            Zab: results.Zab.toString(10),\r\n            Zba: results.Zba.toString(10),\r\n        });\r\n    };\r\n\r\n    render() {\r\n      return (\r\n          <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>P</Form.Label>\r\n                      <Form.Control\r\n                          required\r\n                          type=\"text\"\r\n                          value={this.state.p}\r\n                          onChange={e => this.setState({p: e.target.value})}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>G</Form.Label>\r\n                      <Form.Control\r\n                          required\r\n                          type=\"text\"\r\n                          value={this.state.g}\r\n                          onChange={e => this.setState({g: e.target.value})}\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Xa</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Xa}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Ya</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Ya}\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Xb</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Xb}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Yb</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Yb}\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Zab</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Zab}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Zba</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Zba}\r\n\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n          </Form>\r\n      );\r\n    }\r\n}\r\n","import {fastDegreeModule, NOD, getPrimeNumbersBits, asUTF8Codes, unicodeToChar} from \"../common/functions\";\r\nconst BigInt = require('big-integer');\r\n/*Full ShamirForm encryption and decryption algorithm\r\n* returns an all steps of encoding and decoding,*/\r\nexport function ShamirEncode(message, P) { // size - порядок // p = (q*2) + 1\r\n    let p = BigInt(P); // Открытое большое число\r\n    const [Ca, Cb, Da, Db] = ShamirGenerate(p);\r\n    // A формирует x1\r\n    let x1 = fastDegreeModule(message, Ca, p);\r\n    // x1 отправляется к абоненту B\r\n    let x2 = fastDegreeModule(x1, Cb, p);\r\n    // x2 отправляется к абоненту A\r\n    let x3 = fastDegreeModule(x2, Da, p);\r\n    // x3 отправляется к абоненту B и он получает исходное сообщение\r\n    let x4 = fastDegreeModule(x3, Db, p);\r\n    console.table(x1, x2, x3, x4);\r\n    return {p, Ca, Cb, Da, Db, x1, x2, x3, x4}\r\n}\r\n\r\n/*Generate P, Ca, Cb, Da, Db for ShamirForm's alrorithm\r\n* size of P is 'size' bits*/\r\nfunction ShamirGenerate(p) { // size - порядок // p = (q*2) + 1\r\n    let Ca = BigInt(2); // абонент A\r\n    while (NOD(Ca, p.minus(BigInt(1))) != BigInt(1)){\r\n        Ca = BigInt(BigInt.randBetween(BigInt(1), p.minus(BigInt(1))).toString());\r\n    }\r\n    let Da = BigInt((BigInt(Ca).modInv(p.minus(BigInt(1)))).toString());\r\n\r\n    let Cb = BigInt(2); // абонент B\r\n    while (NOD(Cb, p.minus(BigInt(1))) != BigInt(1)){\r\n        Cb = BigInt(BigInt.randBetween(BigInt(1), p.minus(BigInt(1))).toString());\r\n    }\r\n    let Db = BigInt((BigInt(Cb).modInv(p.minus(BigInt(1)))).toString());\r\n    return [Ca, Cb, Da, Db]\r\n}\r\n","import React from 'react';\r\nimport {Button, Col, Form} from \"react-bootstrap\";\r\nimport {ShamirEncode} from \"./ShamirAlgorithm\";\r\n\r\nexport default class ShamirForm extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            x: '',\r\n            P: '',\r\n            Ca: '',\r\n            Da: '',\r\n            Cb: '',\r\n            Db: '',\r\n            x1: '',\r\n            x2: '',\r\n            x3: '',\r\n            x4: ''\r\n        };\r\n    }\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { x, P } = this.state;\r\n        this.runShamir(x, P);\r\n    };\r\n\r\n    runShamir = (x, p) => {\r\n        const pNumber = parseInt(p);\r\n        console.log(pNumber);\r\n        let results = ShamirEncode(x, pNumber);\r\n        console.log(results);\r\n        this.setState({\r\n            Ca: results.Ca.toString(10),\r\n            Cb: results.Cb.toString(10),\r\n            Da: results.Da.toString(10),\r\n            Db: results.Db.toString(10),\r\n            x1: results.x1.toString(10),\r\n            x2: results.x2.toString(10),\r\n            x3: results.x3.toString(10),\r\n            x4: results.x4.toString(10)\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Сообщение</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.x}\r\n                            onChange={e => this.setState({x: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>P</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.P}\r\n                            onChange={e => this.setState({P: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Ca</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Ca}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Da</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Da}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Cb</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Cb}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Db</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Db}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x1</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.x1}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x2</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.x2}\r\n\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x3</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.x3}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x4</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.x4}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./Home.css\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className={\"home\"}>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import {asUTF8Codes, fastDegreeModule, unicodeToChar} from \"../common/functions\";\r\nconst BigInt = require('big-integer');\r\n/*An Al Gamal algorithm in 3 functions\r\n* Encrypt and Decrypt functions return strings */\r\nexport function ElGamalEncrypt(message, P, D2, G) {\r\n    let p = BigInt(P);\r\n    let g = BigInt(G);\r\n    //Вычисляем Db\r\n    let d2 = BigInt(D2);\r\n    let k;\r\n\r\n    // Шифрование\r\n    k = BigInt(BigInt.randBetween(BigInt(1), (p-BigInt(1)).toString()));\r\n    let r = fastDegreeModule(g, k, p);\r\n    let cipher = (BigInt(message) * fastDegreeModule(d2, k, p)) % p; // Вычисляем е = m * (Db ^ k) mod p\r\n\r\n    return [cipher, r]\r\n}\r\n\r\nexport function ElGamalDecrypt(message, P, C2, R) {\r\n    let p = BigInt(P);\r\n    // 2 числа Ci\r\n    let c2 = BigInt(C2);\r\n    let r = BigInt(R);\r\n    // Шифрование\r\n    let decipher = (BigInt(message) * fastDegreeModule(r, p - BigInt(1) - c2, p)) % p;\r\n    return decipher;\r\n}\r\n\r\nexport function ElGamalGenerate(P, G) { // При P слишком малом может не хватить мощности алфавита для символов Unicode\r\n    let p = BigInt(P);\r\n    let g = BigInt(G);\r\n    // 2 числа Ci\r\n    // Абонент А выбирает случайное число k и вычисляет из него r, e\r\n    let c2 = BigInt(BigInt.randBetween(BigInt(1), (p-BigInt(1))).toString()); // Закрытый ключ\r\n    //Вычисляем Di\r\n    let d2 = fastDegreeModule(g, c2, p); // Открытый\r\n    return [c2,d2];\r\n}\r\n\r\n","import React from 'react';\r\nimport {Form, Col, Button} from 'react-bootstrap';\r\nimport {ElGamalDecrypt, ElGamalEncrypt, ElGamalGenerate} from \"./ElGamalAlgorithm\";\r\nconst BigInt = require('big-integer');\r\nexport default class ElGamal extends React.Component {\r\n    state = {\r\n        message: '',\r\n        p: '',\r\n        g: '',\r\n        Ca: '',\r\n        Da: '',\r\n        Cb: '',\r\n        Db: '',\r\n        decipher: ''\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { message, p, g, Ca, Da } = this.state;\r\n        this.runElGamal(message, p, g, Ca, Da);\r\n    };\r\n\r\n    runElGamal = (message, p, g) => {\r\n        const messageNumber = parseInt(message);\r\n        const pNumber = parseInt(p);\r\n        const gNumber = parseInt(g);\r\n        const [caNumber, daNumber] = ElGamalGenerate(pNumber, gNumber);\r\n        const [cbNumber, dbNumber] = ElGamalGenerate(pNumber, gNumber);\r\n        const [cipher, r] = ElGamalEncrypt(messageNumber, pNumber, dbNumber, gNumber);\r\n        console.log(cipher, r);\r\n        const decipher = ElGamalDecrypt(cipher, pNumber, cbNumber, r);\r\n        console.log(decipher);\r\n        this.setState({\r\n            message: message,\r\n            p: p,\r\n            g: g,\r\n            Ca: caNumber.toString(10),\r\n            Da: daNumber.toString(10),\r\n            Cb: cbNumber.toString(10),\r\n            Db: dbNumber.toString(10),\r\n            decipher: decipher\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Сообщение</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.message}\r\n                            onChange={e => this.setState({message: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>P</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.p}\r\n                            onChange={e => this.setState({p: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>G</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.g}\r\n                            onChange={e => this.setState({g: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Ca</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Ca}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Da</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Da}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Cb</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Db}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Db</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Db}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Полученное сообщение</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.decipher}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import {fastDegreeModule, randomIntFromInterval, NOD} from \"../common/functions\";\r\nconst BigInt = require('big-integer');\r\n/**\r\n * MentalPokerAlgorithm\r\n * @param -module\r\n * @constructor\r\n */\r\nexport function MentalPoker(P){\r\n    const p = BigInt(P);\r\n    //шаг 1: выбираем параметры Алисы и Боба. Выбираем 3 карты.\r\n    const [Ca, Cb, Da, Db] = MentalPokerGenerate(p);\r\n    let cards = [];\r\n    while (cards.length < 3){\r\n        let tmp = BigInt(BigInt.randBetween(BigInt(1), BigInt(54)).toString());\r\n        cards.push(tmp);\r\n    }\r\n    //Шаг 1. Алиса вычисляет числа u1, u2, u3 и высылает их Бобу\r\n    let codeCards = [];\r\n    for(let i = 0; i < 3; ++i){\r\n        codeCards.push(fastDegreeModule(cards[i],Ca, p));\r\n    }\r\n    //Шаг 2. Боб получает 3 числа, выбирает одно из них. Отправляет его Алисе.\r\n    // Алиса получает число, вычисляет карту\r\n    let index = randomIntFromInterval(0, 2);\r\n    let aliceCard = fastDegreeModule(codeCards[index], Da, p);\r\n    //Шаг 3. Боб вычисляет для оставщихся чисел степени\r\n    console.log(codeCards);\r\n    codeCards.splice(index , 1);\r\n    console.log(codeCards);\r\n    for(let i = 0; i < codeCards.length; ++i){\r\n        codeCards[i] = fastDegreeModule(codeCards[i],Cb, p);\r\n    }\r\n    //Шаг 4. Алиса вычисляет одно из них и отправляет Бобу\r\n    //Боб узнаёт карту\r\n    index = randomIntFromInterval(0, 1);\r\n    let w1 =  fastDegreeModule(codeCards[index], Da, p);\r\n    let bobCard = fastDegreeModule(w1, Db, p);\r\n    return [Ca, Da, Cb, Db, cards, aliceCard, bobCard];\r\n}\r\n\r\n/*Generate Ca, Cb, Da, Db for Mental Poker*/\r\nfunction MentalPokerGenerate(p) { // size - порядок // p = (q*2) + 1\r\n    let Ca = BigInt(2); // абонент A\r\n    while (NOD(Ca, p.minus(BigInt(1))) != BigInt(1)){\r\n        Ca = BigInt(BigInt.randBetween(BigInt(1), p.minus(BigInt(1))).toString());\r\n    }\r\n    let Da = BigInt((BigInt(Ca).modInv(p.minus(BigInt(1)))).toString());\r\n\r\n    let Cb = BigInt(2); // абонент B\r\n    while (NOD(Cb, p.minus(BigInt(1))) != BigInt(1)){\r\n        Cb = BigInt(BigInt.randBetween(BigInt(1), p.minus(BigInt(1))).toString());\r\n    }\r\n    let Db = BigInt((BigInt(Cb).modInv(p.minus(BigInt(1)))).toString());\r\n    return [Ca, Cb, Da, Db]\r\n}\r\n","import React from 'react';\r\n\r\nimport {Form, Col, Button} from 'react-bootstrap';\r\nimport {MentalPoker} from \"./MentalPokerAlgorithm\";\r\n\r\nexport default class MentalPokerForm extends React.Component {\r\n    state = {\r\n        p: '',\r\n        Ca: '',\r\n        Da: '',\r\n        Cb: '',\r\n        Db: '',\r\n        alpha: '',\r\n        betta: '',\r\n        gamma: '',\r\n        aliceCard: '',\r\n        bobCard:''\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { p } = this.state;\r\n        this.runMentalPoker(p);\r\n    };\r\n\r\n    runMentalPoker = (p) => {\r\n        const pNumber = parseInt(p);\r\n        const [Ca, Da, Cb, Db, cards, aliceCard, bobCard] = MentalPoker(pNumber);\r\n        console.log(Ca, Cb);\r\n        console.log(Da, Db);\r\n        console.log(aliceCard, bobCard);\r\n        this.setState({\r\n            p: p,\r\n            Ca: Ca.toString(),\r\n            Da: Da.toString(),\r\n            Cb: Cb.toString(),\r\n            Db: Db.toString(),\r\n            aliceCard: aliceCard.toString(),\r\n            bobCard: bobCard.toString(),\r\n            alpha: cards[0].toString(),\r\n            betta: cards[1].toString(),\r\n            gamma: cards[2].toString()\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>P</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.p}\r\n                            onChange={e => this.setState({p: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Ca</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Ca}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Da</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Da}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Cb</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Cb}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Db</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Db}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"4\">\r\n                        <Form.Label>α</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.alpha}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"4\">\r\n                        <Form.Label>β</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.betta}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"4\">\r\n                        <Form.Label>γ</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.gamma}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"4\">\r\n                        <Form.Label>Карта Алисы</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.aliceCard}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"4\">\r\n                        <Form.Label>Карта Боба</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.bobCard}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport NavBar from \"./components/navbar/NabarRx\";\nimport Footer from \"./components/footer/Footer\";\nimport DiffieHellmanForm from \"./components/algoriphms/hellman/DiffieHellmanForm\";\nimport ShamirForm from \"./components/algoriphms/Shamir/ShamirForm\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Home from \"./components/home/home\";\nimport ElGamal from \"./components/algoriphms/ElGamal/ElGamal\";\nimport MentalPoker from \"./components/algoriphms/MentalPoker/MentalPoker\";\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className={\"common\"}>\n                <Router>\n                  <React.Fragment>\n                      <NavBar />\n                      <Switch>\n                          <div className={\"algo mt-5\"}>\n                              <Route exact path=\"/\" component={Home} />\n                              <Route exact path=\"/diffiHellman\" component={DiffieHellmanForm} />\n                              <Route exact path=\"/shamir\" component={ShamirForm} />\n                              <Route exact path=\"/ELGamal\" component={ElGamal} />\n                              <Route exact path=\"/MentalPoker\" component={MentalPoker} />\n                          </div>\n                      </Switch>\n                      <Footer/>\n                  </React.Fragment>\n                </Router>\n            </div>\n\n        );\n    };\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}