{"version":3,"sources":["components/navbar/NabarRx.js","components/footer/Footer.js","components/home/home.js","components/algoriphms/common/functions.js","components/algoriphms/Hellman/DiffieHellmanAlgorithm.js","components/algoriphms/Hellman/DiffieHellmanForm.js","components/algoriphms/Shamir/ShamirAlgorithm.js","components/algoriphms/Shamir/ShamirForm.js","components/algoriphms/MentalPoker/MentalPokerAlgorithm.js","components/algoriphms/MentalPoker/MentalPoker.js","components/algoriphms/ElGamal/ElGamalAlgorithm.js","components/algoriphms/ElGamal/ElGamal.js","components/algoriphms/RSA/RSAAlgorithm.js","components/algoriphms/RSA/RSAForm.js","components/algoriphms/DisgitalSignature/rsaDigitalSignature/RSADigitalSIgnatureAlgorithm.js","components/algoriphms/DisgitalSignature/rsaDigitalSignature/RSADigitalSignatureForm.js","components/algoriphms/DisgitalSignature/elGamalDigitalSignature/ElGamalDigitalSignatureAlgorithm.js","components/algoriphms/DisgitalSignature/elGamalDigitalSignature/ElGamalDigitalSignatureForm.js","components/algoriphms/BabyStepGiantStep/BabyStepGiantStepAlgorithm.js","components/algoriphms/BabyStepGiantStep/BabyStepGiantStepForm.js","App.js","index.js"],"names":["NavbarRx","Navbar","className","to","Brand","Nav","NavDropdown","title","id","Item","href","Footer","Home","BigInt","require","fastDegreeModule","A","P","M","a","p","m","result","arrayOfDegrees","countFactorOf2Degree","num","tmp","equals","multiply","divide","minus","toString","split","helpVar","helpDegree","i","length","degreeModule","NOD","b","randomPrime","bits","min","one","shiftLeft","max","prev","randBetween","isProbablePrime","randomIntFromInterval","Math","floor","random","diffiHellman","G","g","Xa","Ya","Xb","Yb","Zab","Zba","DiffieHellmanForm","state","handleSubmit","event","preventDefault","runDiffHellman","results","parseInt","setState","Form","onSubmit","this","Row","Group","as","Col","md","Label","class","Control","required","type","value","onChange","e","target","readOnly","Button","React","Component","ShamirEncode","message","Ca","Da","modInv","Cb","Db","ShamirGenerate","x1","x2","x3","x4","console","table","ShamirForm","props","x","runShamir","pNumber","log","MentalPoker","MentalPokerGenerate","cards","push","codeCards","index","aliceCard","splice","w1","MentalPokerForm","alpha","betta","gamma","bobCard","runMentalPoker","ElGamalEncrypt","D2","k","d2","r","ElGamalDecrypt","C2","R","c2","ElGamalGenerate","ElGamalForm","decipher","runElGamal","messageNumber","gNumber","caNumber","daNumber","cbNumber","dbNumber","cipher","bigNumbersGenerate","keysize","eilerFunc","d","q","gcd","notEquals","n","RSAForm","runRsa","Na","Nb","RSA","m1","RSADigitalSignatureAlgorithm","c","s","RSADigitalSignatureForm","w","ElGamalDigitalSignatureForm","runAlgorithm","y","u","isNegative","plus","ElGamalDigitalSignatureAlgorithm","ans1","ans2","BabyStepGiantStepAlgorithm","Y","K","a_m","rowY","rowA","startY","startA","j","BabyStepGiantStepForm","run","yNumber","aNumber","mNumber","kNumber","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6e0d024.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./NavBar.css\"\r\n\r\nconst NavbarRx = () => {\r\n    return (\r\n        <Navbar className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <NavLink to=\"/\"><Navbar.Brand><span className=\"navbar-title\">Криптография</span></Navbar.Brand></NavLink>\r\n            <Nav>\r\n                <NavDropdown title=\"Криптосистемы с открытым ключём\" id=\"basic-nav-dropdown\">\r\n                    <NavDropdown.Item>\r\n                        <NavLink to=\"/diffiHellman\" className=\"nav-link\">\r\n                            Алгоритм Диффи-Хеллмана\r\n                        </NavLink>\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item>\r\n                        <NavLink to=\"/shamir\" className=\"nav-link\">\r\n                            Алгоритм Шамира\r\n                        </NavLink>\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item>\r\n                        <NavLink to=\"/elGamal\" className=\"nav-link\">\r\n                            Алогритм Эль-Гамаля\r\n                        </NavLink>\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item>\r\n                        <NavLink to=\"/rsa\" className=\"nav-link\">\r\n                            Алогритм RSA\r\n                        </NavLink>\r\n                    </NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"Криптографические протоколы\" id=\"basic-nav-dropdown\">\r\n                    <NavDropdown.Item>\r\n                        <NavLink to=\"/mentalPoker\" className=\"nav-link\">\r\n                            Ментальный покер\r\n                        </NavLink>\r\n                    </NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"Взлом шифров\" id=\"basic-nav-dropdown\">\r\n                    <NavDropdown.Item>\r\n                        <NavLink to=\"/babyStepGiantStepAlgorithm\" className=\"nav-link\">\r\n                            Шаг младенца, шаг великана\r\n                        </NavLink>\r\n                    </NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"Электронная подпись\" id=\"basic-nav-dropdown\">\r\n                    <NavDropdown.Item href=\"/digitalSignatureRsa\">\r\n                        <NavDropdown.Item>\r\n                            <NavLink to=\"/digitalSignatureRsa\" className=\"nav-link\">\r\n                                rsa\r\n                            </NavLink>\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown.Item>\r\n                    <NavDropdown.Item>\r\n                        <NavDropdown.Item>\r\n                            <NavLink to=\"/digitalSignatureElGamal\" className=\"nav-link\">\r\n                                Эль-Гамаль\r\n                            </NavLink>\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown.Item>\r\n                </NavDropdown>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavbarRx;\r\n","import React from \"react\";\r\n\r\nimport \"./Footer.css\";\r\nconst Footer = () => {\r\n    return (\r\n    <nav className=\"footer\" >\r\n        <h6>Кожевникова Яна, группа 17203. 7 семестр, 2020</h6>\r\n    </nav>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./Home.css\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className={\"home\"}>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","/*\r\n* There are a lot of crypto functions: crypto algorithms and accessory functions\r\n*/\r\nconst BigInt = require('big-integer');\r\n\r\n\r\n/*A - base, P - power, M - module\r\n* returns (A ** P) mod M for any numbers*/\r\nexport function fastDegreeModule(A,P,M) {\r\n    let a = BigInt(A);\r\n    let p = BigInt(P);\r\n    let m = BigInt(M);\r\n    let result = BigInt(1);\r\n    let arrayOfDegrees = countFactorOf2Degree(p).split(\" \");\r\n    let helpVar = (a * a) % m;\r\n    let helpDegree = BigInt(2);\r\n    for (let i = arrayOfDegrees.length; i > 0; i--) {\r\n\r\n        // Возведение в степень по модулю\r\n        if (arrayOfDegrees[i - 1] !== \"\" && arrayOfDegrees[i - 1] !== '1' && arrayOfDegrees[i - 1] !== '0') {\r\n\r\n            while (helpDegree.toString() !== arrayOfDegrees[i - 1]) {\r\n                helpVar = ((helpVar * helpVar)) % m;\r\n                helpDegree = helpDegree.multiply(BigInt(2));\r\n            }\r\n\r\n            result = (result * helpVar) % m;\r\n\r\n        } else result = (result * degreeModule(a, BigInt(arrayOfDegrees[i - 1]), m)) % m;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/*Same result but it's not optimal\r\n* Also it can't evaluate a REAL big numbers*/\r\nconst degreeModule = (a, p, m) => {\r\n    return (a ** p) % m;\r\n};\r\n\r\n\r\n\r\n/*Factorize number to sum of degrees of 2\r\n* returns a string like \"2 4 8\" for 14 */\r\nfunction countFactorOf2Degree(num) {\r\n    let tmp = BigInt(1);\r\n    if (num.equals(BigInt(0))) {\r\n        return \"0\";\r\n    } else if (num.equals(BigInt(1))) {\r\n        return \"1\";\r\n    }\r\n    while (tmp <= num) {\r\n        tmp = tmp.multiply(BigInt(2));\r\n    }\r\n    tmp = tmp.divide(BigInt(2));\r\n    num = num.minus(tmp);\r\n    return tmp.toString() + \" \" + countFactorOf2Degree(num);\r\n}\r\n\r\n/*Find d = a^(-1) mod m\r\n* uses an Extended Euclid's algorithm */\r\nexport function getInverseElem(a,m) {\r\n    m = BigInt(m);\r\n    a = BigInt(a);\r\n    a = (a % m + m) % m;\r\n    if (!a || m < BigInt(2)) {\r\n        return NaN // invalid input\r\n    }\r\n    const s = [];\r\n    let b = m;\r\n    while(b) {                  // Алгоритм Евклида с записью промежуточных значений\r\n        [a, b] = [b, a % b];\r\n        s.push({a, b})\r\n    }\r\n    if (a !== BigInt(1)) {\r\n        return NaN // Обратного элемента нет\r\n    }\r\n    // Нахождение обратного элемента по \"ручному алгоритму\"\r\n    let x = BigInt(1);\r\n    let y = BigInt(0);\r\n    for(let i = s.length - 2; i >= 0; --i) {\r\n        [x, y] = [y,  x - y * ~~(s[i].a / s[i].b)]\r\n    }\r\n    let t = ((y % m) + m) % m;\r\n    if (t > BigInt(0)){\r\n        return t;\r\n    } else {\r\n        return t + m;\r\n    }\r\n}\r\n\r\n/*GCD - Euclid's algorithm to find Greatest common divisor */\r\nexport function NOD(a, b) {\r\n    if (!b) {\r\n        return a;\r\n    }\r\n    return NOD(b, a % b);\r\n}\r\n\r\n\r\n\r\n/*Generate a prime number\r\n* size in bits*/\r\nexport function randomPrime(bits) {\r\n    const min = BigInt.one.shiftLeft(BigInt(bits - 1));\r\n    const max = BigInt.one.shiftLeft(BigInt(bits)).prev();\r\n\r\n    while (true) {\r\n        let p = BigInt.randBetween(min, max);\r\n        // console.log(p);\r\n        if (p.isProbablePrime(32)) {\r\n            return p.toString();\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function randomIntFromInterval(min, max) { // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","/*An Diffie-Hellman algorithm\r\n* Can get (P and Q) OR size of them in number of digits*/\r\nimport {fastDegreeModule, randomIntFromInterval} from \"../common/functions\";\r\nconst BigInt = require('big-integer');\r\n/*An Diffie-Hellman algorithm\r\n* Can get (P and Q) OR size of them in number of digits*/\r\nexport function diffiHellman(P,G){\r\n    let p,g;\r\n    p = BigInt(P);\r\n    g = BigInt(G);\r\n    // first client\r\n    let Xa = (BigInt.randBetween(p.divide(BigInt(2)), p.minus(BigInt(1)))).toString();\r\n    let Ya = fastDegreeModule(g,Xa, p);\r\n\r\n    // second\r\n    let Xb = (BigInt.randBetween(p.divide(BigInt(2)), p.minus(BigInt(1)))).toString();\r\n    let Yb = fastDegreeModule(g,Xb, p);\r\n\r\n    // Connection\r\n    let Zab = fastDegreeModule(Yb,Xa, p);\r\n    let Zba = fastDegreeModule(Ya,Xb, p);\r\n\r\n    // console.table({q, p, g, Xa, Ya, Xb, Yb, Zab, Zba})\r\n    return {p, g, Xa, Ya, Xb, Yb, Zab, Zba}\r\n}\r\n","import React from 'react';\r\n\r\nimport {Form, Col, Button} from 'react-bootstrap';\r\nimport {diffiHellman} from \"./DiffieHellmanAlgorithm\";\r\n\r\nexport default class DiffieHellmanForm extends React.Component {\r\n    state = {\r\n        p: '',\r\n        g: '',\r\n        Xa: '',\r\n        Ya: '',\r\n        Xb: '',\r\n        Yb: '',\r\n        Zab: '',\r\n        Zba: ''\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { p, g } = this.state;\r\n        this.runDiffHellman(p, g);\r\n    };\r\n\r\n    runDiffHellman = (p, g) => {\r\n        const pNumber = parseInt(p);\r\n        const gNumber = parseInt(g);\r\n        let results = diffiHellman(pNumber, gNumber);\r\n        this.setState({\r\n            p: results.p.toString(10),\r\n            g: results.g.toString(10),\r\n            Xa: results.Xa.toString(10),\r\n            Xb: results.Xb.toString(10),\r\n            Ya: results.Ya.toString(10),\r\n            Yb: results.Yb.toString(10),\r\n            Zab: results.Zab.toString(10),\r\n            Zba: results.Zba.toString(10),\r\n        });\r\n    };\r\n\r\n    render() {\r\n      return (\r\n          <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label class>P</Form.Label>\r\n                      <Form.Control\r\n                          required\r\n                          type=\"text\"\r\n                          value={this.state.p}\r\n                          onChange={e => this.setState({p: e.target.value})}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>G</Form.Label>\r\n                      <Form.Control\r\n                          required\r\n                          type=\"text\"\r\n                          value={this.state.g}\r\n                          onChange={e => this.setState({g: e.target.value})}\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Xa</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Xa}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Ya</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Ya}\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Xb</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Xb}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Yb</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Yb}\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Form.Row>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Zab</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Zab}\r\n                      />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} md=\"6\">\r\n                      <Form.Label>Zba</Form.Label>\r\n                      <Form.Control\r\n                          readOnly\r\n                          type=\"text\"\r\n                          value={this.state.Zba}\r\n\r\n                      />\r\n                  </Form.Group>\r\n              </Form.Row>\r\n              <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n          </Form>\r\n      );\r\n    }\r\n}\r\n","import {fastDegreeModule, NOD} from \"../common/functions\";\r\nconst BigInt = require('big-integer');\r\n/*Full ShamirForm encryption and decryption algorithm\r\n* returns an all steps of encoding and decoding,*/\r\nexport function ShamirEncode(message, P) { // size - порядок // p = (q*2) + 1\r\n    let p = BigInt(P); // Открытое большое число\r\n    const [Ca, Cb, Da, Db] = ShamirGenerate(p);\r\n    // A формирует x1\r\n    let x1 = fastDegreeModule(message, Ca, p);\r\n    // x1 отправляется к абоненту B\r\n    let x2 = fastDegreeModule(x1, Cb, p);\r\n    // x2 отправляется к абоненту A\r\n    let x3 = fastDegreeModule(x2, Da, p);\r\n    // x3 отправляется к абоненту B и он получает исходное сообщение\r\n    let x4 = fastDegreeModule(x3, Db, p);\r\n    console.table(x1, x2, x3, x4);\r\n    return {p, Ca, Cb, Da, Db, x1, x2, x3, x4}\r\n}\r\n\r\n/*Generate P, Ca, Cb, Da, Db for ShamirForm's alrorithm\r\n* size of P is 'size' bits*/\r\nfunction ShamirGenerate(p) { // size - порядок // p = (q*2) + 1\r\n    let Ca = BigInt(2); // абонент A\r\n    while (NOD(Ca, p.minus(BigInt(1))) !== BigInt(1)){\r\n        Ca = BigInt(BigInt.randBetween(BigInt(1), p.minus(BigInt(1))).toString());\r\n    }\r\n    let Da = BigInt((BigInt(Ca).modInv(p.minus(BigInt(1)))).toString());\r\n\r\n    let Cb = BigInt(2); // абонент B\r\n    while (NOD(Cb, p.minus(BigInt(1))) !== BigInt(1)){\r\n        Cb = BigInt(BigInt.randBetween(BigInt(1), p.minus(BigInt(1))).toString());\r\n    }\r\n    let Db = BigInt((BigInt(Cb).modInv(p.minus(BigInt(1)))).toString());\r\n    return [Ca, Cb, Da, Db]\r\n}\r\n","import React from 'react';\r\nimport {Button, Col, Form} from \"react-bootstrap\";\r\nimport {ShamirEncode} from \"./ShamirAlgorithm\";\r\n\r\nexport default class ShamirForm extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            x: '',\r\n            P: '',\r\n            Ca: '',\r\n            Da: '',\r\n            Cb: '',\r\n            Db: '',\r\n            x1: '',\r\n            x2: '',\r\n            x3: '',\r\n            x4: ''\r\n        };\r\n    }\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { x, P } = this.state;\r\n        this.runShamir(x, P);\r\n    };\r\n\r\n    runShamir = (x, p) => {\r\n        const pNumber = parseInt(p);\r\n        console.log(pNumber);\r\n        let results = ShamirEncode(x, pNumber);\r\n        console.log(results);\r\n        this.setState({\r\n            Ca: results.Ca.toString(10),\r\n            Cb: results.Cb.toString(10),\r\n            Da: results.Da.toString(10),\r\n            Db: results.Db.toString(10),\r\n            x1: results.x1.toString(10),\r\n            x2: results.x2.toString(10),\r\n            x3: results.x3.toString(10),\r\n            x4: results.x4.toString(10)\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Сообщение</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.x}\r\n                            onChange={e => this.setState({x: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>P</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.P}\r\n                            onChange={e => this.setState({P: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Ca</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Ca}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Da</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Da}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Cb</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Cb}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Db</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Db}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x1</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.x1}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x2</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.x2}\r\n\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x3</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.x3}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x4</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.x4}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import {fastDegreeModule, randomIntFromInterval, NOD} from \"../common/functions\";\r\nconst BigInt = require('big-integer');\r\n/**\r\n * MentalPokerAlgorithm\r\n * @param -module\r\n * @constructor\r\n */\r\nexport function MentalPoker(P){\r\n    const p = BigInt(P);\r\n    //шаг 1: выбираем параметры Алисы и Боба. Выбираем 3 карты.\r\n    const [Ca, Cb, Da, Db] = MentalPokerGenerate(p);\r\n    let cards = [];\r\n    while (cards.length < 3){\r\n        let tmp = BigInt(BigInt.randBetween(BigInt(1), BigInt(54)).toString());\r\n        cards.push(tmp);\r\n    }\r\n    //Шаг 1. Алиса вычисляет числа u1, u2, u3 и высылает их Бобу\r\n    let codeCards = [];\r\n    for(let i = 0; i < 3; ++i){\r\n        codeCards.push(fastDegreeModule(cards[i],Ca, p));\r\n    }\r\n    //Шаг 2. Боб получает 3 числа, выбирает одно из них. Отправляет его Алисе.\r\n    // Алиса получает число, вычисляет карту\r\n    let index = randomIntFromInterval(0, 2);\r\n    let aliceCard = fastDegreeModule(codeCards[index], Da, p);\r\n    //Шаг 3. Боб вычисляет для оставщихся чисел степени\r\n    console.log(codeCards);\r\n    codeCards.splice(index , 1);\r\n    console.log(codeCards);\r\n    for(let i = 0; i < codeCards.length; ++i){\r\n        codeCards[i] = fastDegreeModule(codeCards[i],Cb, p);\r\n    }\r\n    //Шаг 4. Алиса вычисляет одно из них и отправляет Бобу\r\n    //Боб узнаёт карту\r\n    index = randomIntFromInterval(0, 1);\r\n    let w1 =  fastDegreeModule(codeCards[index], Da, p);\r\n    let bobCard = fastDegreeModule(w1, Db, p);\r\n    return [Ca, Da, Cb, Db, cards, aliceCard, bobCard];\r\n}\r\n\r\n/*Generate Ca, Cb, Da, Db for Mental Poker*/\r\nfunction MentalPokerGenerate(p) { // size - порядок // p = (q*2) + 1\r\n    let Ca = BigInt(2); // абонент A\r\n    while (NOD(Ca, p.minus(BigInt(1))) != BigInt(1)){\r\n        Ca = BigInt(BigInt.randBetween(BigInt(1), p.minus(BigInt(1))).toString());\r\n    }\r\n    let Da = BigInt((BigInt(Ca).modInv(p.minus(BigInt(1)))).toString());\r\n\r\n    let Cb = BigInt(2); // абонент B\r\n    while (NOD(Cb, p.minus(BigInt(1))) != BigInt(1)){\r\n        Cb = BigInt(BigInt.randBetween(BigInt(1), p.minus(BigInt(1))).toString());\r\n    }\r\n    let Db = BigInt((BigInt(Cb).modInv(p.minus(BigInt(1)))).toString());\r\n    return [Ca, Cb, Da, Db]\r\n}\r\n","import React from 'react';\r\n\r\nimport {Form, Col, Button} from 'react-bootstrap';\r\nimport {MentalPoker} from \"./MentalPokerAlgorithm\";\r\n\r\nexport default class MentalPokerForm extends React.Component {\r\n    state = {\r\n        p: '',\r\n        Ca: '',\r\n        Da: '',\r\n        Cb: '',\r\n        Db: '',\r\n        alpha: '',\r\n        betta: '',\r\n        gamma: '',\r\n        aliceCard: '',\r\n        bobCard:''\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { p } = this.state;\r\n        this.runMentalPoker(p);\r\n    };\r\n\r\n    runMentalPoker = (p) => {\r\n        const pNumber = parseInt(p);\r\n        const [Ca, Da, Cb, Db, cards, aliceCard, bobCard] = MentalPoker(pNumber);\r\n        console.log(Ca, Cb);\r\n        console.log(Da, Db);\r\n        console.log(aliceCard, bobCard);\r\n        this.setState({\r\n            p: p,\r\n            Ca: Ca.toString(),\r\n            Da: Da.toString(),\r\n            Cb: Cb.toString(),\r\n            Db: Db.toString(),\r\n            aliceCard: aliceCard.toString(),\r\n            bobCard: bobCard.toString(),\r\n            alpha: cards[0].toString(),\r\n            betta: cards[1].toString(),\r\n            gamma: cards[2].toString()\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>P</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.p}\r\n                            onChange={e => this.setState({p: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Ca</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Ca}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Da</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Da}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Cb</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Cb}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Db</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Db}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"4\">\r\n                        <Form.Label>α</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.alpha}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"4\">\r\n                        <Form.Label>β</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.betta}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"4\">\r\n                        <Form.Label>γ</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.gamma}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"4\">\r\n                        <Form.Label>Карта Алисы</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.aliceCard}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"4\">\r\n                        <Form.Label>Карта Боба</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.bobCard}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import {fastDegreeModule} from \"../common/functions\";\r\nconst BigInt = require('big-integer');\r\n/*An Al Gamal algorithm in 3 functions\r\n* Encrypt and Decrypt functions return strings */\r\nexport function ElGamalEncrypt(message, P, D2, G) {\r\n    let p = BigInt(P);\r\n    let g = BigInt(G);\r\n    //Вычисляем Db\r\n    let d2 = BigInt(D2);\r\n    let k;\r\n\r\n    // Шифрование\r\n    k = BigInt(BigInt.randBetween(BigInt(1), p.minus(BigInt(1)).toString()));\r\n    let r = fastDegreeModule(g, k, p);\r\n    let cipher = (BigInt(message) * fastDegreeModule(d2, k, p)) % p; // Вычисляем е = m * (Db ^ k) mod p\r\n\r\n    return [cipher, r]\r\n}\r\n\r\nexport function ElGamalDecrypt(message, P, C2, R) {\r\n    let p = BigInt(P);\r\n    // 2 числа Ci\r\n    let c2 = BigInt(C2);\r\n    let r = BigInt(R);\r\n    // Шифрование\r\n    let decipher = (BigInt(message) * fastDegreeModule(r, p - BigInt(1) - c2, p)) % p;\r\n    return decipher;\r\n}\r\n\r\nexport function ElGamalGenerate(P, G) { // При P слишком малом может не хватить мощности алфавита для символов Unicode\r\n    let p = BigInt(P);\r\n    let g = BigInt(G);\r\n    // 2 числа Ci\r\n    // Абонент А выбирает случайное число k и вычисляет из него r, e\r\n    let c2 = BigInt(BigInt.randBetween(BigInt(1), (p-BigInt(1))).toString()); // Закрытый ключ\r\n    //Вычисляем Di\r\n    let d2 = fastDegreeModule(g, c2, p); // Открытый\r\n    return [c2,d2];\r\n}\r\n\r\n","import React from 'react';\r\nimport {Form, Col, Button} from 'react-bootstrap';\r\nimport {ElGamalDecrypt, ElGamalEncrypt, ElGamalGenerate} from \"./ElGamalAlgorithm\";\r\nconst BigInt = require('big-integer');\r\nexport default class ElGamalForm extends React.Component {\r\n    state = {\r\n        message: '',\r\n        p: '',\r\n        g: '',\r\n        Ca: '',\r\n        Da: '',\r\n        Cb: '',\r\n        Db: '',\r\n        decipher: ''\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const { message, p, g, Ca, Da } = this.state;\r\n        this.runElGamal(message, p, g, Ca, Da);\r\n    };\r\n\r\n    runElGamal = (message, p, g) => {\r\n        const messageNumber = parseInt(message);\r\n        const pNumber = parseInt(p);\r\n        const gNumber = parseInt(g);\r\n        const [caNumber, daNumber] = ElGamalGenerate(pNumber, gNumber);\r\n        const [cbNumber, dbNumber] = ElGamalGenerate(pNumber, gNumber);\r\n        const [cipher, r] = ElGamalEncrypt(messageNumber, pNumber, dbNumber, gNumber);\r\n        console.log(cipher, r);\r\n        const decipher = ElGamalDecrypt(cipher, pNumber, cbNumber, r);\r\n        console.log(decipher);\r\n        this.setState({\r\n            message: message,\r\n            p: p,\r\n            g: g,\r\n            Ca: caNumber.toString(10),\r\n            Da: daNumber.toString(10),\r\n            Cb: cbNumber.toString(10),\r\n            Db: dbNumber.toString(10),\r\n            decipher: decipher\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Сообщение</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.message}\r\n                            onChange={e => this.setState({message: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>P</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.p}\r\n                            onChange={e => this.setState({p: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>G</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.g}\r\n                            onChange={e => this.setState({g: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Ca</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Ca}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Da</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Da}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Cb</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Db}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Db</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Db}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Полученное сообщение</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.decipher}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import {fastDegreeModule, randomPrime, NOD, getInverseElem} from \"../common/functions\";\r\nconst BigInt = require('big-integer');\r\n\r\n/*\r\n* алгортим RSA с \"лазейкой\"\r\n* */\r\nexport function RSA(message){\r\n    const [Pa, Qa, Na, Da, Ca, fia] = bigNumbersGenerate(10);\r\n    const [Pb, Qb, Nb, Db, Cb, fib] = bigNumbersGenerate(10);\r\n    let m = BigInt(message);\r\n    let e = fastDegreeModule(m, Db, Nb);\r\n    let m1 = fastDegreeModule(e, Cb, Nb);\r\n    return [Na, Ca, Da, Nb, Cb, Db, m1];\r\n}\r\n\r\n\r\n/*Generate P, Q, N, E, D for RSA algorithm*/\r\nfunction bigNumbersGenerate(keysize) {\r\n    let d = BigInt(65537);\r\n    let eilerFunc;\r\n\r\n    let p = BigInt(randomPrime(keysize / 2));\r\n    let q = BigInt(randomPrime(keysize / 2));\r\n    eilerFunc = (p.minus(BigInt(1)).multiply(q.minus(BigInt(1))));\r\n    if(NOD(d,eilerFunc) !== BigInt(1)){\r\n        do {\r\n            d = BigInt.randBetween(BigInt(5), eilerFunc.minus(BigInt(1)))\r\n        } while (BigInt.gcd(d, eilerFunc).notEquals(1));\r\n    }\r\n\r\n    let n = p.multiply(q);\r\n    let c = BigInt(d).modInv(eilerFunc);\r\n  //  let c = getInverseElem(d, eilerFunc);\r\n    return [p, q, n, d, c, eilerFunc];\r\n}\r\n","import React from 'react';\r\nimport {Button, Col, Form} from \"react-bootstrap\";\r\nimport {RSA} from \"./RSAAlgorithm\";\r\n\r\nexport default class RSAForm extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            Ca: '',\r\n            Da: '',\r\n            Na: '',\r\n            Cb: '',\r\n            Db: '',\r\n            Nb: '',\r\n            m1: ''\r\n        };\r\n    }\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const {message} = this.state;\r\n        this.runRsa(message);\r\n    };\r\n\r\n    runRsa = (message) => {\r\n        const [Na, Ca, Da, Nb, Cb, Db, m1] = RSA(message);\r\n        this.setState({\r\n            Na: Na,\r\n            Ca: Ca,\r\n            Da: Da,\r\n            Nb: Nb,\r\n            Cb: Cb,\r\n            Db: Db,\r\n            m1: m1\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Сообщение</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.message}\r\n                            onChange={e => this.setState({message: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Ca</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Ca}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Da</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Da}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Cb</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Cb}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Db</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Db}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Na</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Na}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>Nb</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Nb}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Полученное сообщение</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.m1}\r\n                            onChange={e => this.setState({m1: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import {NOD, randomPrime, fastDegreeModule} from \"../../common/functions\";\r\n\r\nconst BigInt = require('big-integer');\r\n\r\nexport function RSADigitalSignatureAlgorithm(message){\r\n    const [Na, Da, Ca] = bigNumbersGenerate(10);\r\n    let m = BigInt(message)\r\n    let s = fastDegreeModule(m, Ca, Na);\r\n    let w = fastDegreeModule(s, Da, Na);\r\n    return [Na, Da, Ca, s, w];\r\n}\r\n\r\n/*Generate P, Q, N, E, D for RSA algorithm*/\r\nfunction bigNumbersGenerate(keysize) {\r\n    let d = BigInt(65537);\r\n    let eilerFunc;\r\n\r\n    let p = BigInt(randomPrime(keysize / 2));\r\n    let q = BigInt(randomPrime(keysize / 2));\r\n    eilerFunc = (p.minus(BigInt(1)).multiply(q.minus(BigInt(1))));\r\n    if(NOD(d,eilerFunc) !== BigInt(1)){\r\n        do {\r\n            d = BigInt.randBetween(BigInt(5), eilerFunc.minus(BigInt(1)))\r\n        } while (BigInt.gcd(d, eilerFunc).notEquals(1));\r\n    }\r\n\r\n    let n = p.multiply(q);\r\n    let c = BigInt(d).modInv(eilerFunc);\r\n    //  let c = getInverseElem(d, eilerFunc);\r\n    return [n, d, c, eilerFunc];\r\n}\r\n","import React from 'react';\r\nimport {Button, Col, Form} from \"react-bootstrap\";\r\nimport {RSADigitalSignatureAlgorithm} from \"./RSADigitalSIgnatureAlgorithm\";\r\n\r\nexport default class RSADigitalSignatureForm extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            Na: '',\r\n            Ca: '',\r\n            Da: '',\r\n            s: '',\r\n            w: ''\r\n        };\r\n    }\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const {message} = this.state;\r\n        this.runRsa(message);\r\n    };\r\n\r\n    runRsa = (message) => {\r\n        const [Na, Da, Ca, s, w] =RSADigitalSignatureAlgorithm(message);\r\n        this.setState({\r\n            Na: Na,\r\n            Da: Da,\r\n            Ca: Ca,\r\n            s: s,\r\n            w: w\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Сообщение</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.message}\r\n                            onChange={e => this.setState({message: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>C</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Ca}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>D</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.Da}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>s</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.s}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Полученное сообщение</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.w}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import {fastDegreeModule, NOD} from \"../../common/functions\";\r\n\r\nconst BigInt = require('big-integer');\r\n\r\nexport function ElGamalDigitalSignatureAlgorithm(message, P, G){\r\n    let p = BigInt(P);\r\n    let g = BigInt(G);\r\n    let m = BigInt(message);\r\n    let x = BigInt(BigInt.randBetween(BigInt(1), p.minus(BigInt(1))));\r\n    let y = BigInt(fastDegreeModule(g, x, p));\r\n    let k = BigInt(2); // абонент A\r\n    while (NOD(k, p.minus(BigInt(1))) !== 1){\r\n        k = BigInt(BigInt.randBetween(BigInt(1), p.minus(BigInt(1))));\r\n    }\r\n    let r = BigInt(fastDegreeModule(g, k, p));\r\n    let u = BigInt(m.minus(x.multiply(r)) % (p - 1));\r\n    while (u.isNegative()){\r\n        u = u.plus(p.minus(BigInt(1)));\r\n    }\r\n    let s = BigInt(k.modInv(p.minus(BigInt(1))).multiply(u) % (p - 1));\r\n    while (s.isNegative()){\r\n        s = s.plus(p.minus(BigInt(1)));\r\n    }\r\n    let ans1 = BigInt((fastDegreeModule(y, r, p) * fastDegreeModule(r, s, p)) % p);\r\n    let ans2 = BigInt(fastDegreeModule(g, m, p));\r\n    return [x, y, k, r, u, s, ans1, ans2]\r\n}\r\n","import React from 'react';\r\nimport {Button, Col, Form} from \"react-bootstrap\";\r\nimport {ElGamalDigitalSignatureAlgorithm} from \"./ElGamalDigitalSignatureAlgorithm\";\r\n\r\nexport default class ElGamalDigitalSignatureForm extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            p: '',\r\n            g: '',\r\n            x: '',\r\n            y: '',\r\n            k: '',\r\n            r: '',\r\n            u: '',\r\n            s: '',\r\n            ans1: '',\r\n            ans2: ''\r\n        };\r\n    }\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const {message, p, g} = this.state;\r\n        this.runAlgorithm(message, p, g);\r\n    };\r\n\r\n    runAlgorithm = (message, p, g) => {\r\n        const m = parseInt(message);\r\n        const pNumber = parseInt(p);\r\n        const gNumber = parseInt(g);\r\n        const [x, y, k, r, u, s, ans1, ans2] = ElGamalDigitalSignatureAlgorithm(m, pNumber, gNumber);\r\n        this.setState({\r\n            p: p,\r\n            g: g,\r\n            message: m,\r\n            x: x,\r\n            y: y,\r\n            k: k,\r\n            r: r,\r\n            u: u,\r\n            s: s,\r\n            ans1: ans1,\r\n            ans2: ans2\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>Сообщение</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.message}\r\n                            onChange={e => this.setState({message: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>P</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.p}\r\n                            onChange={e => this.setState({p: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>G</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.g}\r\n                            onChange={e => this.setState({g: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>открытый ключ y</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.y}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>закрытый ключ x</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.x}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>k</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.k}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>r</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.r}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>s</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.s}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>левая часть равенства</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.ans1}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"12\">\r\n                        <Form.Label>правая часть равенства</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.ans2}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import {fastDegreeModule} from \"../common/functions\";\r\n\r\nconst BigInt = require('big-integer');\r\n\r\n//решение уравнения y = a^x mod p\r\nexport function BabyStepGiantStepAlgorithm(Y, A, M, K, P){\r\n    // Шаг 1\r\n    let m = BigInt(M);\r\n    let k = BigInt(K);\r\n    let p = BigInt(P);\r\n    let y = BigInt(Y);\r\n    let a = BigInt(A);\r\n    let a_m = fastDegreeModule(a, m, p);\r\n    //Шаг 2\r\n    // посмотреть, как по-англйскии - ряд\r\n    let rowY = [], rowA = [];\r\n    let startY = y, startA = BigInt(1);\r\n    for(let i = 0; i < k; ++i){\r\n        startA = BigInt((startA.multiply(a_m)) % p);\r\n        rowA.push(startA);\r\n    }\r\n    rowY.push(startY);\r\n    for(let i = 0; i < m - 1; ++i){\r\n        startY = BigInt(startY.multiply(a) % p);\r\n        rowY.push(startY);\r\n    }\r\n    rowY.push(startY);\r\n    console.log(rowY);\r\n    console.log(rowA);\r\n    for(let i = 0; i < rowA.length; ++i){\r\n        for(let j = 0; j < rowY.length; ++j){\r\n            if(rowY[j].equals(rowA[i])){\r\n                console.log(i, j);\r\n                return (i + 1) * m - (j);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","import React from 'react';\r\nimport {Form, Col, Button} from 'react-bootstrap';\r\nimport {BabyStepGiantStepAlgorithm} from \"./BabyStepGiantStepAlgorithm\";\r\nexport default class BabyStepGiantStepForm extends React.Component {\r\n    state = {\r\n        y: '',\r\n        a: '',\r\n        m: '',\r\n        k: '',\r\n        p: '',\r\n        x: ''\r\n    };\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const {y, a, m, k, p } = this.state;\r\n        this.run(y, a, m, k, p);\r\n    };\r\n\r\n    run = (y, a, m, k, p) => {\r\n        const yNumber = parseInt(y);\r\n        const aNumber = parseInt(a);\r\n        const mNumber = parseInt(m);\r\n        const kNumber = parseInt(k);\r\n        const pNumber = parseInt(p);\r\n        let x = BabyStepGiantStepAlgorithm(yNumber, aNumber, mNumber, kNumber, pNumber);\r\n        console.log(y,a, m, k, p, x)\r\n        this.setState({\r\n            y: yNumber,\r\n            a: aNumber,\r\n            m: mNumber,\r\n            k: kNumber,\r\n            p: pNumber,\r\n            x: x\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Form className={\"col-6 pt-5 offset-3 shadow-lg p-3 2 bg-white rounded\"} onSubmit={this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>y</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.y}\r\n                            onChange={e => this.setState({y: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>a</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.a}\r\n                            onChange={e => this.setState({a: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>P</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.p}\r\n                            onChange={e => this.setState({p: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>m</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.m}\r\n                            onChange={e => this.setState({m: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>k</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type=\"text\"\r\n                            value={this.state.k}\r\n                            onChange={e => this.setState({k: e.target.value})}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"6\">\r\n                        <Form.Label>x</Form.Label>\r\n                        <Form.Control\r\n                            readOnly\r\n                            type=\"text\"\r\n                            value={this.state.x}\r\n                        />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Button type=\"submit\" className=\"align-content-center\" onSubmit={this.handleSubmit}>Расчитать</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport NavBar from \"./components/navbar/NabarRx\";\r\nimport Footer from \"./components/footer/Footer\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport Home from \"./components/home/home\";\r\nimport DiffieHellmanForm from \"./components/algoriphms/Hellman/DiffieHellmanForm\";\r\nimport ShamirForm from \"./components/algoriphms/Shamir/ShamirForm\";\r\nimport MentalPokerForm from \"./components/algoriphms/MentalPoker/MentalPoker\";\r\nimport ElGamalForm from \"./components/algoriphms/ElGamal/ElGamal\";\r\nimport RSAForm from \"./components/algoriphms/RSA/RSAForm\";\r\nimport RSADigitalSignatureForm from \"./components/algoriphms/DisgitalSignature/rsaDigitalSignature/RSADigitalSignatureForm\";\r\nimport ElGamalDigitalSignatureForm\r\n    from \"./components/algoriphms/DisgitalSignature/elGamalDigitalSignature/ElGamalDigitalSignatureForm\";\r\nimport BabyStepGiantStepForm from \"./components/algoriphms/BabyStepGiantStep/BabyStepGiantStepForm\";\r\n\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className={\"common\"}>\r\n                <Router>\r\n                    <NavBar />\r\n                    <Switch>\r\n                        <div className={\"algo mt-5\"}>\r\n                            <Route exact path=\"/\" component={Home} />\r\n                            <Route exact path=\"/diffiHellman\" component={DiffieHellmanForm} />\r\n                            <Route exact path=\"/shamir\" component={ShamirForm} />\r\n                            <Route exact path=\"/elGamal\" component={ElGamalForm} />\r\n                            <Route exact path=\"/mentalPoker\" component={MentalPokerForm} />\r\n                            <Route exact path=\"/rsa\" component={RSAForm}/>\r\n                            <Route exact path=\"/digitalSignatureRsa\" component={RSADigitalSignatureForm}/>\r\n                            <Route exact path=\"/digitalSignatureElGamal\" component={ElGamalDigitalSignatureForm}/>\r\n                            <Route exact path=\"/babyStepGiantStepAlgorithm\" component={BabyStepGiantStepForm}/>\r\n                        </div>\r\n                    </Switch>\r\n                    <Footer />\r\n                </Router>\r\n            </div>\r\n\r\n        );\r\n    };\r\n};\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}